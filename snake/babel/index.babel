const canvas = document.querySelector("canvas");
const context = canvas.getContext("2d");

const RIGHT = 0;
const DOWN = 1;
const LEFT = 2;
const UP = 3;

const START = 0;
const PLAYING = 1;
const END = 2;

let direction = RIGHT;
let length = 4;
let cadence = 50;
let lastNow = null;
let state = START;

const worm = [[4,4],[4,3],[4,2],[4,1]];
const apples = [];
const commands = [];

const tiles = [];
for (let y = 0; y < 32; y++) {
  for (let x = 0; x < 32; x++) {
    tiles.push(Math.random());
  }
}

function update(now) {
  if (state === START
   || state === END) {
    return;
  }
  
  if (lastNow === null) {
    lastNow = now;
  }
  
  if (now - lastNow > cadence) {
    lastNow = now;
    
    if (commands.length > 0) {
      const changeTo = commands.shift();
      if (direction !== changeTo) {
        direction = changeTo;
      }
    }
    
    const last = worm.pop();
    if (length > worm.length) {
      worm.push([last[0],last[1]]);
    }
    
    const first = worm[0];
    if (direction === RIGHT) {
      last[0] = first[0] + 1;
      last[1] = first[1];
    } else if (direction === DOWN) {
      last[0] = first[0];
      last[1] = first[1] + 1;
    } else if (direction === LEFT) {
      last[0] = first[0] - 1;
      last[1] = first[1];
    } else {
      last[0] = first[0];
      last[1] = first[1] - 1;
    }
    
    if (last[0] < 0 
     || last[1] < 0
     || last[0] > 31
     || last[1] > 31) {
      state = END;
      return;
    }
    
    for (let part of worm) {
      if (last[0] === part[0]
       && last[1] === part[1]) {
        state = END;
        return;
      }
    }

    worm.unshift(last);
    
    if (apples.length < 2) {
      const x = Math.round(Math.random() * 31);
      const y = Math.round(Math.random() * 31);
      apples.push([x,y]);
    }
    
    for (let index = apples.length - 1; index >= 0; index--) {
      const apple = apples[index];
      if (apple[0] === last[0]
       && apple[1] === last[1]) {
        length++;
        apples.splice(index, 1);
      }
    }
  }
}

function render(now) {
  context.clearRect(0,0,canvas.width,canvas.height);
  for (let index = 0; index < tiles.length; index++) {
    const x = index % 32;
    const y = Math.floor(index / 32);
    tiles[index] += 0.01;
    const alpha = Math.sin(tiles[index] * Math.PI * 2.0);
    context.fillStyle = `rgba(0,0,0,${0.1 + (alpha * 0.05)})`
    context.fillRect(x * 16, y * 16, 16, 16);    
  }
  
  context.fillStyle = "#333";
  for (let part of worm) {
    context.fillRect(part[0] * 16, part[1] * 16, 16, 16);
  }
  
  context.fillStyle = "#f00";
  for (let apple of apples) {
    context.fillRect(apple[0] * 16, apple[1] * 16, 16, 16);
  }
  
  if (state === START
   || state === END) {
    context.font = "900 36px Exo";
    context.textAlign = "center";
    context.textBaseline = "middle";
    context.fillStyle = "#333";
    if (state === START) {
      context.fillText("CLICK TO PLAY", canvas.width * 0.5, canvas.height * 0.5);
    } else if (state === END) {
      context.fillText("GAME OVER", canvas.width * 0.5, canvas.height * 0.5);
      context.font = "900 18px Exo";
      context.fillText("CLICK TO PLAY", canvas.width * 0.5, canvas.height * 0.55)
    }
  }
}

function frame(now) {
  update(now);
  render(now);
  window.requestAnimationFrame(frame);
}

function key(e) {
  if (e.keyCode === 37 || e.keyCode === 65) {
    if (direction != RIGHT) {
      commands.push(LEFT);
    }
  } else if (e.keyCode === 38 || e.keyCode === 87) {
    if (direction != DOWN) {
      commands.push(UP);
    }
  } else if (e.keyCode === 39 || e.keyCode === 68) {
    if (direction != LEFT) {
      commands.push(RIGHT);
    }
  } else if (e.keyCode === 40 || e.keyCode === 83) {
    if (direction != UP) {
      commands.push(DOWN);
    }
  } else if (e.keyCode === 32) {
    startGame();
  }
}

function startGame() {
  if (state === START
   || state === END) {
    state = PLAYING;
    length = 4;
    direction = RIGHT;
    while (apples.pop());
    while (worm.pop());
    while (commands.pop());
    worm.push([4,4],[4,3],[4,2],[4,1]);
  }
}

function click(e) {
  startGame();
}

frame(0);

window.addEventListener("keyup", key);
canvas.addEventListener("click", click);